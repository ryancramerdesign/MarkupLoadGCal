<?php

/**
 * Google Calendar Loader for ProcessWire
 *
 * Given an Google Calendar XML feed URL, this module will pull it, cache it, and let you foreach() it or render it.
 *
 * Usage: 
 *
 * $calendar = $modules->get('MarkupLoadGCal');
 * $feedURL = 'https://www.google.com/calendar/feeds/3icgo6ucgvsf6bi5orld9moqqc%40group.calendar.google.com/public/full';
 * $calendar->load($feedURL); 
 * $items = $calendar->find('from=2011-12-1, to=2011-12-31');
 * foreach($items as $item) echo "<p>{$item->title}</p>";
 *
 * ProcessWire 2.x 
 * Copyright (C) 2014 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class MarkupLoadGCal extends WireData implements Module {

	public static function getModuleInfo() {
		return array(
			'title' => 'Google Calendar Feed (GCal)', 
			'summary' => 'Given an Google Calendar XML feed URL, this module will pull it, cache it, and let you foreach() it or render it.', 
			'version' => 101, 
			'singular' => false, 
			'autoload' => false, 
			);
	}

	/**
	 * Settings used for the search
	 *
	 * These may be set by a find("selector") or the dedicated functions, i.e. setFrom(), setTo(), setKeywords(), etc.
	 *
	 */
	protected $settings = array(
		'calendarID' => '',	// Google calendar ID. Preferably just the ID, but may also be the XML feed URL
		'limit' => 100,		// Max number of items to load from the feed (default: 100)
		'sort' => 'date',	// May be 'date' or 'modified'
		'ascending' => true, 	// Whether or not the sort will be ascending
		'from' => 0, 		// Timestamp of starting date, default = today
		'to' => 0, 		// Timestamp of ending date, default = +1 month
		'keywords' => '',	// Keywords to search for
		'recurring' => true,	// Whether recurring events should be expanded (true), or (false) left as a single event.
		); 

	/**
	 * Configurable options provided by this module
	 *
	 * These options may be set direction with $calendar->option = value;
	 *
	 */
	protected $options = array(
		'cache' => 3600, 			// Number of seconds to cache, or 0 to skip caching (default = 1 hour)
		'maxLength' => 8192,			// The max number of characters allowed in any text from the feed (typically to truncate the description)
		'stripTags' => false, 			// Strip any markup tags that appear in the feed? (default: true)
		'encodeEntities' => false, 		// Whether to automatically decode and re-encode the entities for all fields (default: false)
		'dateFormat' => "F j, Y, g:i a",	// Default date format to use when rendering the feed's output (may be date() or strftime() format)
		'html' => true,				// Whether to convert the 'description' to HTML
		);

	/**
	 * Markup customization for when using render():
	 *
	 * These may be set directly
	 *
	 */
	protected $markup = array(
		'listOpen' => "\n<ul class='MarkupLoadGCal vcalendar'>",
		'listClose' => "\n</ul>",
		'itemOpen' => "\n\t<li class='vevent'>",
		'itemClose' => "\n\t</li>",
		'itemTitleOpen' => " \n\t\t<h2 class='title summary'>", 
		'itemTitleClose' => "</h2>",
		'itemDateFromOpen' => " \n\t\t<time class='dtstart' title='{datetime}' datetime='{datetime}'>", 
		'itemDateFromClose' => "</time> &#8211;", 
		'itemDateToOpen' => " \n\t\t<time class='dtend' title='{datetime}' datetime='{datetime}'>", 
		'itemDateToClose' => "</time>", 
		'itemLocationOpen' => " \n\t\t<div class='location'>", 
		'itemLocationClose' => "</div>", 
		'itemDescriptionOpen' => " \n\t\t<div class='description'>", 
		'itemDescriptionClose' => "</div>",
		); 

	/**
	 * Items in the GCal feed, after they are loaded
	 *
	 */
	protected $items = null;

	/**
	 * Path where the XML cache file is stored
	 *
	 */
	protected $cachePath; 

	/**
	 * Last error that occurred
	 *
	 */
	protected $error = '';

	/**
	 * Construct the GCal, optionally providing a calendar ID
	 *
	 */
	public function __construct() {
		$this->cachePath = $this->config->paths->cache . $this->className() . '/';
	}

	/**
	 * Define the cache path
	 *
	 * Should be done here in the construct rather than the init() because init() is not called on install/uninstall
	 *
	 */
	public function init() {
		$this->multibyteSupport = function_exists("mb_strlen"); 
	}

	/**
	 * Set a configuration option
	 *
	 * @param string $key Option name
	 * @param string|int $value Option value
	 * @return this
	 *
	 */
	public function set($key, $value) {
		if($key == 'options' && is_array($value)) $this->options = array_merge($this->options, $value); 
			else if($key == 'markup' && is_array($value)) $this->markup = array_merge($this->markup, $value); 
			else if(array_key_exists($key, $this->options)) $this->options[$key] = $value; 
			else if(array_key_exists($key, $this->markup)) $this->markup[$key] = $value; 
			else if($key == 'limit') $this->setLimit($value); 
			else if($key == 'sort') $this->setSort($value); 
			else if($key == 'ascending') $this->ascending = $value ? true : false; 
			else if($key == 'dateFrom' || $key == 'from') $this->setFrom($value);
			else if($key == 'dateTo' || $key == 'to') $this->setTo($value); 
			else if($key == 'keywords') $this->setKeywords($value); 
			else return parent::set($key, $value); 
		return $this;
	}

	/**
	 * Gets a config option or $channel info
	 *
	 */
	public function get($key) {
		if($key == 'error') return $this->error; 
		if(array_key_exists($key, $this->options)) return $this->options[$key];
		if(array_key_exists($key, $this->markup)) return $this->markup[$key];
		if(array_key_exists($key, $this->settings)) return $this->settings[$key];
		return parent::get($key);
	}

	/**
	 * Sets the google calendar ID or XML URL
	 *
	 */
	public function setCalendarID($id) {
		$this->settings['calendarID'] = $id; 
		return $this; 
	}

	/**
	 * Alternate syntax to set the calendar ID (I preferred this in the API vs setCalendarID)
	 *
	 * @param string $calendarID Google calendar ID or http URL
	 *
	 */
	public function load($calendarID) {
		$this->setCalendarID($calendarID); 
		return $this; 
	}

	/**
	 * Sets the starting date (from), may be timestamp (integer) or date in any common string format
	 *
	 */
	public function setFrom($dateFrom) {
		$this->settings['from'] = ctype_digit("$dateFrom") ? (int) $dateFrom : strtotime($dateFrom); 
		return $this; 
	}

	/**
	 * Sets the ending date (to), may be timestamp (integer) or date in any common string format
	 *
	 */
	public function setTo($dateTo) {
		$this->settings['to'] = ctype_digit("$dateTo") ? (int) $dateTo : strtotime($dateTo); 
		return $this; 
	}

	/**
	 * Sets optional keywords to include in the search
	 *
	 */
	public function setKeywords($keywords) {
		$this->settings['keywords'] = $this->sanitizer->text($keywords); 
		return $this; 
	}

	/**
	 * Sets the max number of items that may be returned (default = 100)
	 *
	 */
	public function setLimit($limit) {
		$this->settings['limit'] = (int) $limit; 
		return $this; 
	}

	/**
	 * Sets the max number of items that may be returned (default = 100)
	 *
	 */
	public function setHTML($html) {
		$this->options['html'] = $html ? true : false;
		return $this; 
	}

	/**
	 * Sets the sort: may be 'date' or 'modified'
	 *
	 * Include a "-" at the beginning of the sort to make it descending
	 *
	 */
	public function setSort($sort) {
		$ascending = $sort[0] != '-';
		$sort = trim($sort, '-');
		if($sort == 'date' || $sort == 'modified') {
			$this->settings['sort'] = $sort; 
			$this->settings['ascending'] = $ascending; 
		}
		return $this; 
	}

	/**
	 * Find the calendar events matching the given selector and return them in a WireArray
	 *
	 * @param string $selectorString
	 * @return MarkupLoadGCalArray Calendar items
	 *
	 */
	public function find($selectorString = '') {

		if($selectorString) { 
			foreach(new Selectors($selectorString) as $s) {
				if($s->operator != '=') throw new WireException("Only '=' operators are allowed here"); 
				$field = $s->field;
				$value = $s->value; 
				if($field == 'from') $this->setFrom($value); 
					else if($field == 'id') $this->setCalendarID($value); 
					else if($field == 'to') $this->setTo($value); 
					else if($field == 'keywords') $this->setKeywords($value); 
					else if($field == 'limit') $this->setLimit($value); 
					else if($field == 'sort') $this->setSort($value); 
					else if($field == 'limit') $this->setLimit($value); 
					else if($field == 'html') $this->setHTML($value); 
			}
		}

		if(!$this->calendarID) throw new WireException("No calendar is specified"); 

		$this->makeCalendar(); 

		return $this->items; 
	}

	/**
	 * Load a GCal feed and make the calendar
	 *
	 */
	protected function makeCalendar() {

		$from = $this->settings['from']; 
		$to = $this->settings['to']; 
		$calendarID = $this->settings['calendarID'];

		if(strpos($calendarID, 'https://') === 0) $calendarID = str_replace('https://', 'http://', $calendarID);
		if(strpos($calendarID, 'http://') !== 0) $url = "http://www.google.com/calendar/feeds/" . urlencode($calendarID) . "/public/full?"; 
			else if(strpos($calendarID, '?')) $url = $calendarID . "&";
			else $url = $calendarID . "?";

		if(($from || $to) && !strpos($url, 'start-min=')) { 
			if($from) $url .= "start-min=" . urlencode(date(DATE_ATOM, $from)) . '&'; 
			if($to) $url .= 'start-max=' . urlencode(date(DATE_ATOM, $to)) . '&';
		}

		if(!strpos($url, 'orderby=')) $url .= "orderby=" . ($this->sort == 'date' ? 'starttime' : 'lastmodified') . '&';
		if(!strpos($url, 'sortorder=')) $url .= 'sortorder=' . ($this->ascending ? 'ascending' : 'descending') . '&';

		if($this->keywords) $url .= 'q=' . urlencode($this->keywords) . '&';
		if($this->limit) $url .= "max-results=" . ((int) $this->limit) . '&';
		if($this->recurring) $url .= 'singleevents=true&';

		$url = rtrim($url, '?&'); 
		$this->items = new MarkupLoadGCalArray($this);
		$xmlData = $this->loadXmlData($url); 
		$xml = simplexml_load_string($xmlData);

		if(!$xml) {
			$msg = "Unable to load GCal XML feed at " . htmlentities($url) . ": \n";
			foreach(libxml_get_errors() as $error) $msg .= $error . " \n";
			$this->error($msg); 
			return $this;
		}

		$n = 0;
		foreach($xml->entry as $item) {
			$item = $this->makeCalendarItem($item, $from, $to);
			if(!$item) continue; 
			$this->items->add($item); 
			if(++$n >= $this->settings['limit']) break;
		}
	}

	/**
	 * Given an XML Google Calendar item, make and return a MarkupLoadGCalItem
	 *
	 * @return MarkupLoadGCalItem|bool Returns false if item should be skipped
	 *
	 */
	protected function makeCalendarItem($item, $from, $to) {

		$a = new MarkupLoadGCalItem();
		$where = $item->where->attributes();
		$when = $item->when->attributes();

		$a->title = $this->cleanText((string) $item->title);
		$a->description = $this->cleanText($item->content, $this->options['html']);
		$a->location = $this->cleanText($where['valueString']);
		$a->set('from', strtotime($when['startTime']));
		$a->set('to', strtotime($when['endTime']));

		// filter out events that started before the requested time 
		// these will be multi-day events that span into the requested time
		if($from && $a->from < $from) return false;

		// detect when an event spans multiple days
		$a->multiDay = date('j', $a->to) != date('j', $a->from);

		// subtract 1 second from the time if a multi-day event ends as 12am
		// this prevents it from saying 3 days rather than 2. 
		if($a->multiDay && (((int) date('Gi', $a->to)) < 1)) $a->to -= 1;

		if(strpos($this->options['dateFormat'], '%') !== false) {
			// if dateFormat has a percent, that's consistent with what we see in strftime format
			$a->dateFrom = strftime($this->options['dateFormat'], $a->from); 
			$a->dateTo = strftime($this->options['dateFormat'], $a->to);
		} else {
			// regular PHP date format
			$a->dateFrom = date($this->options['dateFormat'], $a->from); 
			$a->dateTo = date($this->options['dateFormat'], $a->to);
		}
		$a->created = strtotime($item->published); 
		$a->modified = strtotime($item->modified); 
		$a->author = (string) $item->author->name; 
		$a->id = (string) $item->id; 
		$a->link = $this->cleanText($item->link['href']);
		$a->summary = $this->cleanText($item->summary);

		return $a; 
	}


	/**
	 * Load XML data from either the RSS URL or the cache file
	 *
	 */
	protected function loadXmlData($url) {

		$cacheFile = $this->cachePath . md5($url) . '.xml.cache';

                if(!is_file($cacheFile) || time() - filemtime($cacheFile) > $this->options['cache']) {

                        $xmlData = @file_get_contents($url); 

			if($xmlData === false) {
				$this->error("Unable to load " . htmlentities($url));
				return false;
			}
			
			$xmlData = str_replace(array('<gd:', '</gd:'), array('<', '</'), $xmlData);

			if($this->options['cache']) {
				@file_put_contents($cacheFile, $xmlData, LOCK_EX);
			}

                } else {

			$xmlData = file_get_contents($cacheFile); 
			if($xmlData === false) {
				$this->error("Unable to load XML data cache");
				return false;
			}
		}

		return $xmlData; 	
	}

	/**
	 * Cleans text string from a feed before storage in our object
	 *
	 */
	protected function cleanText($value, $html = false) {

		if($this->options['stripTags']) {
			$value = trim(strip_tags($value)); 
		}

                if($this->multibyteSupport) {
                        if(mb_strlen($value, "UTF-8") > $this->options['maxLength']) {
				$value = mb_substr($value, 0, $this->options['maxLength'], "UTF-8");
			}

                } else {
                        if(strlen($value) > $this->options['maxLength']) {
				$value = substr($value, 0, $this->options['maxLength']);
			}
                }

		if($this->options['encodeEntities']) {
			$value = html_entity_decode($value, ENT_QUOTES, "UTF-8"); 
			$value = htmlentities($value, ENT_QUOTES, "UTF-8"); 
		}

		if($html) {
			if(strpos($value, 'http') !== false) {
				$value = preg_replace('{(https?://[^\s]+)($|\s)}m', '<a href="$1">$1</a>$2', $value); 
			}
			$value = '<p>' . preg_replace('/[\r\n]{2}/', '</p><p>', $value) . '</p>';
			$value = str_replace(array("\r", "\n"), '<br />', $value); 
		}

		return $value; 
	}


	/**
	 * Render the markup for data retrieved from the RSS feed
	 *
	 */
	public function render(MarkupLoadGCalArray $items) {
		if(!count($items)) return $this->error; 
		$out = $this->markup['listOpen']; 
		foreach($this as $item) $out .= $this->renderItem($item); 
		$out .= $this->markup['listClose']; 
		return $out; 
	}

	/**
	 * Render a single item, as used by the render() method
	 *
	 */
	public function renderItem(MarkupLoadGCalItem $item) {

		$out = 	$this->markup['itemOpen'] . 
			$this->markup['itemTitleOpen'] . htmlentities($item->title, ENT_QUOTES, "UTF-8") . $this->markup['itemTitleClose'] . 
			str_replace('{datetime}', date('c', $item->from), $this->markup['itemDateFromOpen']) . $item->dateFrom . $this->markup['itemDateFromClose'] . 
			str_replace('{datetime}', date('c', $item->to), $this->markup['itemDateToOpen']) . $item->dateTo . $this->markup['itemDateToClose'] . 
			$this->markup['itemLocationOpen'] . $item->location . $this->markup['itemLocationClose'] . 
			$this->markup['itemDescriptionOpen'] . $item->description . $this->markup['itemDescriptionClose'] . 
			$this->markup['itemClose']; 

		return $out; 
	}

	/**
	 * Make this class iterable
	 *
	 */
	public function getIterator() {
		return $this->items; 		
	}

	/**
	 * Make this class countable
	 *
	 */
	public function count() {
		return count($this->items); 
	}

	/**
	 * Create a directory where we will store our cache files
	 *
	 */
	public function ___install() {

		if(ini_get('allow_url_fopen') == "0") {
			throw new WireException("Cannot install '{$this->className}' because it requires PHP's 'allow_url_fopen' which is disabled on your server."); 
		}

		$path = $this->cachePath; 
		if(!is_dir($path)) {
			if(!mkdir($path)) throw new WireException("Unable to create directory: $path"); 
			if($this->config->chmodDir) chmod($path, octdec($this->config->chmodDir));
		}
	}

	/**
	 * Remove cache files and directory
	 *
	 */
	public function ___uninstall() {
		$dir = new DirectoryIterator($this->cachePath); 
		foreach($dir as $file) {
			if($file->isDir() || $file->isDot()) continue;
			if($file->isFile() && preg_match('/\.xml.cache$/', $file->getFilename())) unlink($file->getPathname());
		}
		rmdir($this->cachePath); 
	}

	/**
	 * Save the error message and send it on to PW
	 *
	 */
	public function error($text, $flags = 0) {
		$this->error = $text; 		
		return parent::error($text, $flags); 
	}
}

/**
 * Array of MarkupLoadGCalItem instances
 *
 * This serves as the value returned by MarkupLoadGCal module
 *
 */
class MarkupLoadGCalArray extends WireArray {

	protected $calendar;

	public function __construct(MarkupLoadGCal $calendar) {
		$this->calendar = $calendar; 	
	}
	
	public function isValidItem($item) {
		return $item instanceof MarkupLoadGCalItem;
	}

	public function makeBlankItem() {
		return new MarkupLoadGCalItem();
	}

	public function render() {
		return $this->calendar->render($this);
	}
}

/**
 * Class to store data for an individual calendar item
 *
 */
class MarkupLoadGCalItem extends WireData { 
	public function __construct() {
		$this->set('title', '');
		$this->set('description', ''); 
		$this->set('location', '');
		$this->set('author', '');
		$this->set('from', 0);
		$this->set('to', 0);
		$this->set('dateFrom', '');
		$this->set('dateTo', '');
		$this->set('created', 0);
		$this->set('modified', 0); 
		$this->set('id', '');
		$this->set('multiDay', false); 
		$this->set('link', ''); 
		$this->set('summary', ''); 
	}
}



